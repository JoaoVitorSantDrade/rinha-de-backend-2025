user www-data;
worker_processes auto;

events {
    worker_connections 255;
    use epoll;
}

http {
   lua_shared_dict shared_data 1m;
   error_log /dev/null crit;
   access_log off;
   keepalive_timeout 65s 60s;
   keepalive_requests 100;

   upstream api {
       server unix:/tmp/api1.sock;
       server unix:/tmp/api2.sock;
   
       keepalive 32;
   }

   upstream api1 {
       server unix:/tmp/api1.sock;

       keepalive 32;
   }

   upstream api2 {
       server unix:/tmp/api2.sock;

       keepalive 32;
   }

   server {
       listen 9999;

       location /api1/ {
           rewrite ^/api1/(.*)$ /$1 break;
           proxy_pass http://api1;
           proxy_http_version 1.1;
           proxy_set_header Connection "";
       }

       location /api2/ {
           rewrite ^/api2/(.*)$ /$1 break;
           proxy_pass http://api2;
           proxy_http_version 1.1;
           proxy_set_header Connection "";
       }

       location = /payments {
           content_by_lua_block {
                ngx.req.read_body()
                local data = ngx.req.get_body_data()
               
                ngx.status = 200
                ngx.flush(true)

                local counter = ngx.shared.shared_data:incr("rr_counter", 1, 0)
                local selected = counter % 2 == 0 and "unix:/tmp/api1.sock" or "unix:/tmp/api2.sock"
                local sock = ngx.socket.tcp()
                sock:settimeout(50)
                sock:connect(selected)
                sock:send("POST /payments HTTP/1.1\r\nContent-Type: application/json\r\nContent-Length: " .. #data .. "\r\nConnection: keep-alive\r\n\r\n")
                sock:send(data)
                sock:setkeepalive(60000, 50) 
             
           }
       }

       location / {
           proxy_pass http://api;
           proxy_http_version 1.1;
           proxy_set_header Connection "";
       }
   }
}